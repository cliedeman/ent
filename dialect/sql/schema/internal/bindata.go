// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/field.tmpl
// template/schema.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateFieldTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x50\x4d\x8f\xda\x30\x10\xbd\xe7\x57\x3c\x45\x3d\x00\x2a\x86\x72\xeb\x11\x51\x50\x51\xab\xf4\x00\xfd\x01\xc6\x9e\x10\x6b\x8d\x9d\x75\x9c\x95\x22\xcb\xff\x7d\x65\xf3\xb1\x91\x56\x42\xeb\xd3\x7b\xf3\xe6\xbd\xf1\x4c\x08\x8b\x59\xb1\xb1\xed\xe0\xd4\xb9\xf1\x58\x2d\x7f\xfc\x9c\xb7\x8e\x3a\x32\x1e\x3b\x2e\xe8\x64\xed\x0b\xf6\x46\x30\xac\xb5\x46\x6e\xea\x90\x74\xf7\x46\x92\x15\xc7\x46\x75\xe8\x6c\xef\x04\x41\x58\x49\x50\x1d\xb4\x12\x64\x3a\x92\xe8\x8d\x24\x07\xdf\x10\xd6\x2d\x17\x0d\x61\xc5\x96\x77\x15\xb5\xed\x8d\x2c\x94\xc9\xfa\xdf\xfd\x66\x5b\x1d\xb6\xa8\x95\x26\xdc\x6a\xce\x5a\x0f\xa9\x1c\x09\x6f\xdd\x00\x5b\xc3\x8f\x86\x79\x47\xc4\x8a\xd9\x22\xc6\x22\x84\x39\x24\xd5\xca\x10\xca\x5a\x91\x96\x25\xe6\x31\x16\x00\x90\x29\x0b\x01\xdf\xd8\x2e\xc1\xe3\xd0\x12\x62\x9c\x94\xb9\x54\xf1\x4b\x62\xe5\x34\xf7\xa6\x97\xa2\x54\x0d\xb6\xb1\xba\xbf\x18\xf6\x8b\x6a\xde\x6b\x9f\xe2\xee\x78\x12\xc2\x27\x39\xc6\x29\x4b\x4e\x32\xf2\x31\x79\x9c\xf6\xaf\xf5\xca\x1a\xae\x11\xe3\x03\x4f\xa6\xcf\x1c\xb7\x01\x55\xaf\x35\x3f\xe9\xf4\x49\x56\xa9\x2b\xfe\x92\xf1\xbf\x51\xaf\x7d\xb6\x5d\xd1\x73\xd3\x6f\xde\x1d\x44\x43\x17\x9e\xcf\x93\x96\xfd\xa0\x79\xdf\x91\x1a\xe3\xd3\xa8\x83\xb7\x8e\x9f\xe9\x0f\x0d\xd7\x9c\x07\xcd\x27\x1f\xcb\xe9\xee\xa3\xa4\xef\xc5\x9d\xc4\xf8\x1e\x00\x00\xff\xff\xf1\x5f\xbf\x16\x94\x02\x00\x00")

func templateFieldTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateFieldTmpl,
		"template/field.tmpl",
	)
}

func templateFieldTmpl() (*asset, error) {
	bytes, err := templateFieldTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/field.tmpl", size: 660, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateSchemaTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x51\xc1\x6a\x1c\x3b\x10\xbc\xeb\x2b\x8a\xc1\x07\xaf\x79\xd6\xec\xf3\x2d\xb9\x2d\xc6\x06\x43\x62\x02\xf6\x2d\xe4\xa0\x95\x7a\x76\x84\x67\xa5\x89\xd4\x13\xb2\x08\xfd\x7b\x18\x69\xd6\x59\x27\xc6\xf1\x4d\xdd\x55\xea\xaa\xae\x4e\xa9\xbd\x10\xd7\x7e\x3c\x04\xbb\xeb\x19\x57\xeb\xff\x3f\x5c\x8e\x81\x22\x39\xc6\xad\xd2\xb4\xf5\xfe\x09\x77\x4e\x4b\x6c\x86\x01\x85\x14\x31\xe3\xe1\x07\x19\x29\x1e\x7b\x1b\x11\xfd\x14\x34\x41\x7b\x43\xb0\x11\x83\xd5\xe4\x22\x19\x4c\xce\x50\x00\xf7\x84\xcd\xa8\x74\x4f\xb8\x92\xeb\x23\x8a\xce\x4f\xce\x08\xeb\x0a\xfe\xe9\xee\xfa\xe6\xfe\xe1\x06\x9d\x1d\x08\x4b\x2f\x78\xcf\x30\x36\x90\x66\x1f\x0e\xf0\x1d\xf8\x44\x8c\x03\x91\x14\x17\x6d\xce\x22\x25\x18\xea\xac\x23\x34\x51\xf7\xb4\x57\x0d\x72\x16\xa3\xd2\x4f\x6a\x47\x48\x09\x67\xf2\x4b\x2d\xee\xd5\x9e\x66\x4c\xd8\xfd\xe8\x03\xe3\x5c\x00\x40\xb3\xb3\xdc\x4f\x5b\xa9\xfd\xbe\xed\x96\x95\x5b\x72\xdc\xbc\x89\xb6\xc6\xaa\x81\xf4\x3b\x59\xf3\x3b\x7e\x1f\xfe\x41\x5e\xec\xbf\x87\xd4\x76\x96\x06\xd3\x88\x95\x10\x6d\x5b\x97\x5c\xb6\x43\xef\x07\x13\x4b\x84\x95\x5a\xd3\xb1\x6c\xbd\x43\xe7\xeb\x41\xd2\x3a\x83\x1c\x5b\x3e\x48\xc1\x87\x91\x5e\x4e\x88\x1c\x26\xcd\x48\xc5\x08\x39\x96\x0f\x65\x90\xc8\x45\xec\x76\x56\x8e\xf5\x20\x2f\x3f\x4a\xd1\x4d\x4e\xe3\xfc\xb4\xb7\x5a\xf8\xe7\x2b\x7c\xfd\x36\xcf\x2a\xe5\x32\x3b\x10\x4f\xc1\x9d\x02\xb5\x9f\xd2\x25\x82\x72\x3b\xc2\x99\x5c\xe4\x72\x2e\x48\x45\xc1\xb4\x1f\x07\xc5\x84\xa6\xe6\x00\x79\x24\xcc\x5f\xc9\x99\x63\x99\x67\xd3\xaf\xb9\xda\x38\xe7\x59\xcd\xa1\x54\x6b\x35\x2b\xf9\xbb\xfd\xa7\xc5\xbf\x08\xe9\xd9\x50\x3d\xee\x29\xf4\xa8\xb6\x03\x7d\x44\x53\x34\x4b\x31\x0b\xe7\xdc\xe4\xff\xde\xb6\xf5\xd9\xfe\xb4\xee\x39\xab\x52\xbd\x96\x55\x01\xd2\x3c\x25\xa5\x65\xdd\x5f\x01\x00\x00\xff\xff\x2f\x50\x73\xd9\xca\x03\x00\x00")

func templateSchemaTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateSchemaTmpl,
		"template/schema.tmpl",
	)
}

func templateSchemaTmpl() (*asset, error) {
	bytes, err := templateSchemaTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/schema.tmpl", size: 970, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/field.tmpl":  templateFieldTmpl,
	"template/schema.tmpl": templateSchemaTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"field.tmpl":  &bintree{templateFieldTmpl, map[string]*bintree{}},
		"schema.tmpl": &bintree{templateSchemaTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
