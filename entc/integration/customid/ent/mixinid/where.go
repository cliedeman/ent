// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by entc, DO NOT EDIT.

package mixinid

import (
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/entc/integration/customid/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their identifier.
func ID(id uuid.UUID) predicate.MixinID {
	return predicate.MixinID(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.MixinID {
	return predicate.MixinID(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.MixinID {
	return predicate.MixinID(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.MixinID {
	return predicate.MixinID(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.MixinID {
	return predicate.MixinID(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.MixinID {
	return predicate.MixinID(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.MixinID {
	return predicate.MixinID(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.MixinID {
	return predicate.MixinID(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.MixinID {
	return predicate.MixinID(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// SomeOtherField applies equality check predicate on the "someOtherField" field. It's identical to SomeOtherFieldEQ.
func SomeOtherField(v string) predicate.MixinID {
	return predicate.MixinID(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSomeOtherField), v))
	})
}

// TestField applies equality check predicate on the "testField" field. It's identical to TestFieldEQ.
func TestField(v string) predicate.MixinID {
	return predicate.MixinID(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTestField), v))
	})
}

// SomeOtherFieldEQ applies the EQ predicate on the "someOtherField" field.
func SomeOtherFieldEQ(v string) predicate.MixinID {
	return predicate.MixinID(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSomeOtherField), v))
	})
}

// SomeOtherFieldNEQ applies the NEQ predicate on the "someOtherField" field.
func SomeOtherFieldNEQ(v string) predicate.MixinID {
	return predicate.MixinID(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSomeOtherField), v))
	})
}

// SomeOtherFieldIn applies the In predicate on the "someOtherField" field.
func SomeOtherFieldIn(vs ...string) predicate.MixinID {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MixinID(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSomeOtherField), v...))
	})
}

// SomeOtherFieldNotIn applies the NotIn predicate on the "someOtherField" field.
func SomeOtherFieldNotIn(vs ...string) predicate.MixinID {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MixinID(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSomeOtherField), v...))
	})
}

// SomeOtherFieldGT applies the GT predicate on the "someOtherField" field.
func SomeOtherFieldGT(v string) predicate.MixinID {
	return predicate.MixinID(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSomeOtherField), v))
	})
}

// SomeOtherFieldGTE applies the GTE predicate on the "someOtherField" field.
func SomeOtherFieldGTE(v string) predicate.MixinID {
	return predicate.MixinID(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSomeOtherField), v))
	})
}

// SomeOtherFieldLT applies the LT predicate on the "someOtherField" field.
func SomeOtherFieldLT(v string) predicate.MixinID {
	return predicate.MixinID(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSomeOtherField), v))
	})
}

// SomeOtherFieldLTE applies the LTE predicate on the "someOtherField" field.
func SomeOtherFieldLTE(v string) predicate.MixinID {
	return predicate.MixinID(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSomeOtherField), v))
	})
}

// SomeOtherFieldContains applies the Contains predicate on the "someOtherField" field.
func SomeOtherFieldContains(v string) predicate.MixinID {
	return predicate.MixinID(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSomeOtherField), v))
	})
}

// SomeOtherFieldHasPrefix applies the HasPrefix predicate on the "someOtherField" field.
func SomeOtherFieldHasPrefix(v string) predicate.MixinID {
	return predicate.MixinID(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSomeOtherField), v))
	})
}

// SomeOtherFieldHasSuffix applies the HasSuffix predicate on the "someOtherField" field.
func SomeOtherFieldHasSuffix(v string) predicate.MixinID {
	return predicate.MixinID(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSomeOtherField), v))
	})
}

// SomeOtherFieldEqualFold applies the EqualFold predicate on the "someOtherField" field.
func SomeOtherFieldEqualFold(v string) predicate.MixinID {
	return predicate.MixinID(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSomeOtherField), v))
	})
}

// SomeOtherFieldContainsFold applies the ContainsFold predicate on the "someOtherField" field.
func SomeOtherFieldContainsFold(v string) predicate.MixinID {
	return predicate.MixinID(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSomeOtherField), v))
	})
}

// TestFieldEQ applies the EQ predicate on the "testField" field.
func TestFieldEQ(v string) predicate.MixinID {
	return predicate.MixinID(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTestField), v))
	})
}

// TestFieldNEQ applies the NEQ predicate on the "testField" field.
func TestFieldNEQ(v string) predicate.MixinID {
	return predicate.MixinID(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTestField), v))
	})
}

// TestFieldIn applies the In predicate on the "testField" field.
func TestFieldIn(vs ...string) predicate.MixinID {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MixinID(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTestField), v...))
	})
}

// TestFieldNotIn applies the NotIn predicate on the "testField" field.
func TestFieldNotIn(vs ...string) predicate.MixinID {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MixinID(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTestField), v...))
	})
}

// TestFieldGT applies the GT predicate on the "testField" field.
func TestFieldGT(v string) predicate.MixinID {
	return predicate.MixinID(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTestField), v))
	})
}

// TestFieldGTE applies the GTE predicate on the "testField" field.
func TestFieldGTE(v string) predicate.MixinID {
	return predicate.MixinID(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTestField), v))
	})
}

// TestFieldLT applies the LT predicate on the "testField" field.
func TestFieldLT(v string) predicate.MixinID {
	return predicate.MixinID(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTestField), v))
	})
}

// TestFieldLTE applies the LTE predicate on the "testField" field.
func TestFieldLTE(v string) predicate.MixinID {
	return predicate.MixinID(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTestField), v))
	})
}

// TestFieldContains applies the Contains predicate on the "testField" field.
func TestFieldContains(v string) predicate.MixinID {
	return predicate.MixinID(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTestField), v))
	})
}

// TestFieldHasPrefix applies the HasPrefix predicate on the "testField" field.
func TestFieldHasPrefix(v string) predicate.MixinID {
	return predicate.MixinID(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTestField), v))
	})
}

// TestFieldHasSuffix applies the HasSuffix predicate on the "testField" field.
func TestFieldHasSuffix(v string) predicate.MixinID {
	return predicate.MixinID(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTestField), v))
	})
}

// TestFieldEqualFold applies the EqualFold predicate on the "testField" field.
func TestFieldEqualFold(v string) predicate.MixinID {
	return predicate.MixinID(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTestField), v))
	})
}

// TestFieldContainsFold applies the ContainsFold predicate on the "testField" field.
func TestFieldContainsFold(v string) predicate.MixinID {
	return predicate.MixinID(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTestField), v))
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.MixinID) predicate.MixinID {
	return predicate.MixinID(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.MixinID) predicate.MixinID {
	return predicate.MixinID(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MixinID) predicate.MixinID {
	return predicate.MixinID(func(s *sql.Selector) {
		p(s.Not())
	})
}
