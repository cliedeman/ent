// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/entc/integration/customid/ent/mixinid"
	"github.com/facebook/ent/entc/integration/customid/ent/predicate"
	"github.com/facebook/ent/schema/field"
)

// MixinIdUpdate is the builder for updating MixinId entities.
type MixinIdUpdate struct {
	config
	hooks    []Hook
	mutation *MixinIdMutation
}

// Where adds a new predicate for the builder.
func (miu *MixinIdUpdate) Where(ps ...predicate.MixinId) *MixinIdUpdate {
	miu.mutation.predicates = append(miu.mutation.predicates, ps...)
	return miu
}

// SetSomeOtherField sets the someOtherField field.
func (miu *MixinIdUpdate) SetSomeOtherField(s string) *MixinIdUpdate {
	miu.mutation.SetSomeOtherField(s)
	return miu
}

// SetTestField sets the testField field.
func (miu *MixinIdUpdate) SetTestField(s string) *MixinIdUpdate {
	miu.mutation.SetTestField(s)
	return miu
}

// Mutation returns the MixinIdMutation object of the builder.
func (miu *MixinIdUpdate) Mutation() *MixinIdMutation {
	return miu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (miu *MixinIdUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(miu.hooks) == 0 {
		affected, err = miu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MixinIdMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			miu.mutation = mutation
			affected, err = miu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(miu.hooks) - 1; i >= 0; i-- {
			mut = miu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, miu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (miu *MixinIdUpdate) SaveX(ctx context.Context) int {
	affected, err := miu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (miu *MixinIdUpdate) Exec(ctx context.Context) error {
	_, err := miu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (miu *MixinIdUpdate) ExecX(ctx context.Context) {
	if err := miu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (miu *MixinIdUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   mixinid.Table,
			Columns: mixinid.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: mixinid.FieldID,
			},
		},
	}
	if ps := miu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := miu.mutation.SomeOtherField(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mixinid.FieldSomeOtherField,
		})
	}
	if value, ok := miu.mutation.TestField(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mixinid.FieldTestField,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, miu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mixinid.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// MixinIdUpdateOne is the builder for updating a single MixinId entity.
type MixinIdUpdateOne struct {
	config
	hooks    []Hook
	mutation *MixinIdMutation
}

// SetSomeOtherField sets the someOtherField field.
func (miuo *MixinIdUpdateOne) SetSomeOtherField(s string) *MixinIdUpdateOne {
	miuo.mutation.SetSomeOtherField(s)
	return miuo
}

// SetTestField sets the testField field.
func (miuo *MixinIdUpdateOne) SetTestField(s string) *MixinIdUpdateOne {
	miuo.mutation.SetTestField(s)
	return miuo
}

// Mutation returns the MixinIdMutation object of the builder.
func (miuo *MixinIdUpdateOne) Mutation() *MixinIdMutation {
	return miuo.mutation
}

// Save executes the query and returns the updated entity.
func (miuo *MixinIdUpdateOne) Save(ctx context.Context) (*MixinId, error) {
	var (
		err  error
		node *MixinId
	)
	if len(miuo.hooks) == 0 {
		node, err = miuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MixinIdMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			miuo.mutation = mutation
			node, err = miuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(miuo.hooks) - 1; i >= 0; i-- {
			mut = miuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, miuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (miuo *MixinIdUpdateOne) SaveX(ctx context.Context) *MixinId {
	node, err := miuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (miuo *MixinIdUpdateOne) Exec(ctx context.Context) error {
	_, err := miuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (miuo *MixinIdUpdateOne) ExecX(ctx context.Context) {
	if err := miuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (miuo *MixinIdUpdateOne) sqlSave(ctx context.Context) (_node *MixinId, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   mixinid.Table,
			Columns: mixinid.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: mixinid.FieldID,
			},
		},
	}
	id, ok := miuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing MixinId.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := miuo.mutation.SomeOtherField(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mixinid.FieldSomeOtherField,
		})
	}
	if value, ok := miuo.mutation.TestField(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mixinid.FieldTestField,
		})
	}
	_node = &MixinId{config: miuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, miuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mixinid.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
