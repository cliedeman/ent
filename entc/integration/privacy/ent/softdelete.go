// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/entc/integration/privacy/ent/softdelete"
)

// SoftDelete is the model entity for the SoftDelete schema.
type SoftDelete struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Active holds the value of the "active" field.
	Active bool `json:"active,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SoftDelete) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case softdelete.FieldActive:
			values[i] = new(sql.NullBool)
		case softdelete.FieldID:
			values[i] = new(sql.NullInt64)
		case softdelete.FieldName:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SoftDelete", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SoftDelete fields.
func (sd *SoftDelete) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case softdelete.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sd.ID = int(value.Int64)
		case softdelete.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				sd.Name = value.String
			}
		case softdelete.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				sd.Active = value.Bool
			}
		}
	}
	return nil
}

// Update returns a builder for updating this SoftDelete.
// Note that you need to call SoftDelete.Unwrap() before calling this method if this SoftDelete
// was returned from a transaction, and the transaction was committed or rolled back.
func (sd *SoftDelete) Update() *SoftDeleteUpdateOne {
	return (&SoftDeleteClient{config: sd.config}).UpdateOne(sd)
}

// Unwrap unwraps the SoftDelete entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sd *SoftDelete) Unwrap() *SoftDelete {
	tx, ok := sd.config.driver.(*txDriver)
	if !ok {
		panic("ent: SoftDelete is not a transactional entity")
	}
	sd.config.driver = tx.drv
	return sd
}

// String implements the fmt.Stringer.
func (sd *SoftDelete) String() string {
	var builder strings.Builder
	builder.WriteString("SoftDelete(")
	builder.WriteString(fmt.Sprintf("id=%v", sd.ID))
	builder.WriteString(", name=")
	builder.WriteString(sd.Name)
	builder.WriteString(", active=")
	builder.WriteString(fmt.Sprintf("%v", sd.Active))
	builder.WriteByte(')')
	return builder.String()
}

// SoftDeletes is a parsable slice of SoftDelete.
type SoftDeletes []*SoftDelete

func (sd SoftDeletes) config(cfg config) {
	for _i := range sd {
		sd[_i].config = cfg
	}
}
